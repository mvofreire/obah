{"version":3,"sources":["../../application/controllers/auth.controller.js"],"names":["tokenList","doLogin","req","res","body","email","password","Usuario","findUserWithRolesAuthenticate","usuario","token","jwt","sign","id","_id","appConfig","tokenSecret","expiresIn","tokenTimeExpiration","refreshToken","refreshTokenSecret","refreshTokenTimeExpiration","response","name","saved","status","send","postData","decoded","verify","json","doRegister","data","createNewUser"],"mappings":"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","sourcesContent":["import Usuario from \"../models/Usuario\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport appConfig from \"../config/main\";\r\n\r\nconst tokenList = {};\r\n\r\nconst doLogin = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const usuario = await Usuario.findUserWithRolesAuthenticate(\r\n      email,\r\n      password\r\n    );\r\n\r\n    const token = jwt.sign({ id: usuario._id }, appConfig.tokenSecret, {\r\n      expiresIn: appConfig.tokenTimeExpiration\r\n    });\r\n    const refreshToken = jwt.sign(\r\n      { id: usuario._id },\r\n      appConfig.refreshTokenSecret,\r\n      {\r\n        expiresIn: appConfig.refreshTokenTimeExpiration\r\n      }\r\n    );\r\n\r\n    const response = {\r\n      id: usuario._id,\r\n      name: usuario.name,\r\n      email: usuario.email,\r\n      saved: usuario.saved,\r\n      token,\r\n      refreshToken\r\n    };\r\n    tokenList[refreshToken] = response;\r\n    res.status(200).send(response);\r\n  } catch (e) {\r\n    res.status(500).send(e);\r\n  }\r\n};\r\n\r\nconst refreshToken = (req, res) => {\r\n  // refresh the damn token\r\n  const postData = req.body;\r\n  // if refresh token exists\r\n  if (postData.refreshToken && postData.refreshToken in tokenList) {\r\n    const decoded = jwt.verify(\r\n      postData.refreshToken,\r\n      appConfig.refreshTokenSecret\r\n    );\r\n    const token = jwt.sign({ id: decoded.id }, appConfig.tokenSecret, {\r\n      expiresIn: appConfig.tokenTimeExpiration\r\n    });\r\n    const response = {\r\n      token: token\r\n    };\r\n    // update the token in the list\r\n    tokenList[postData.refreshToken].token = token;\r\n    res.status(200).json(response);\r\n  } else {\r\n    res.status(404).send(\"Invalid request\");\r\n  }\r\n};\r\n\r\nconst doRegister = async (req, res) => {\r\n  const data = req.body;\r\n\r\n  try {\r\n    const usuario = await Usuario.createNewUser(data);\r\n    return res.status(200).send(usuario);\r\n  } catch (e) {\r\n    res.status(500).send(\"Erro ao criar usuario\");\r\n  }\r\n};\r\n\r\nexport default {\r\n  doLogin,\r\n  doRegister,\r\n  refreshToken\r\n};\r\n"],"file":"auth.controller.js"}