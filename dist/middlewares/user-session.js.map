{"version":3,"sources":["../../application/middlewares/user-session.js"],"names":["isExpired","expire","now","Date","getTime","isAllowed","req","testUrl","url","allowed","appConfig","publicRoutes","indexOf","res","next","headers","authorization","split","type","token","decoded","jwt","verify","tokenSecret","ignoreExpiration","exp","userId","id","Usuario","findById","usuario","appContext","userSession","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,MAAM,EAAI;AAC1B,MAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAnC;;AACA,MAAIF,GAAG,GAAGD,MAAV,EAAkB;AAChB,UAAM,8BAAN;AACD;AACF,CALD;;AAOA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,MAAMC,OAAO,GAAGD,GAAG,CAACE,GAApB;AACA,MAAMC,OAAO,GAAGC,iBAAUC,YAAV,CAAuBC,OAAvB,CAA+BL,OAA/B,IAA0C,CAAC,CAA3D;AACA,SAAOE,OAAP;AACD,CAJD;;;;;;;0BAMe,iBAAOH,GAAP,EAAYO,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACTR,GAAG,CAACS,OAAJ,IAAeT,GAAG,CAACS,OAAJ,CAAYC,aADlB;AAAA;AAAA;AAAA;;AAAA;AAGLA,YAAAA,aAHK,GAGWV,GAAG,CAACS,OAAJ,CAAYC,aAHvB;AAAA,mCAIaA,aAAa,CAACC,KAAd,CAAoB,GAApB,CAJb,mEAIFC,IAJE,6BAIIC,KAJJ;AAKHC,YAAAA,OALG,GAKOC,yBAAIC,MAAJ,CAAWH,KAAX,EAAkBT,iBAAUa,WAA5B,EAAyC;AACvDC,cAAAA,gBAAgB,EAAE;AADqC,aAAzC,CALP;AASTxB,YAAAA,SAAS,CAACoB,OAAO,CAACK,GAAT,CAAT;AAEIC,YAAAA,MAXK,GAWIN,OAAO,CAACO,EAXZ;AAAA;AAAA,mBAYaC,oBAAQC,QAAR,CAAiBH,MAAjB,CAZb;;AAAA;AAYHI,YAAAA,OAZG;AAaTxB,YAAAA,GAAG,CAACyB,UAAJ,GAAiB;AACfC,cAAAA,WAAW,EAAEF;AADE,aAAjB;AAbS;AAAA;;AAAA;AAAA;AAAA;AAiBTG,YAAAA,OAAO,CAACC,GAAR,cAjBS,CAkBT;AACA;AACA;;AApBS;AAuBbpB,YAAAA,IAAI;;AAvBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport Usuario from \"../models/Usuario\";\r\nimport appConfig from \"../config/main\";\r\n\r\nconst isExpired = expire => {\r\n  const now = new Date().getTime() / 1000;\r\n  if (now > expire) {\r\n    throw \"Tempo de sessÃ£o foi expirado\";\r\n  }\r\n};\r\n\r\nconst isAllowed = req => {\r\n  const testUrl = req.url;\r\n  const allowed = appConfig.publicRoutes.indexOf(testUrl) > -1;\r\n  return allowed;\r\n};\r\n\r\nexport default async (req, res, next) => {\r\n  if (req.headers && req.headers.authorization) {\r\n    try {\r\n      let authorization = req.headers.authorization;\r\n      const [type, token] = authorization.split(\" \");\r\n      const decoded = jwt.verify(token, appConfig.tokenSecret, {\r\n        ignoreExpiration: false\r\n      });\r\n\r\n      isExpired(decoded.exp);\r\n\r\n      var userId = decoded.id;\r\n      const usuario = await Usuario.findById(userId);\r\n      req.appContext = {\r\n        userSession: usuario\r\n      };\r\n    } catch (e) {\r\n      console.log(e);\r\n      // if (!isAllowed(req)) {\r\n      //   return res.status(401).send(\"unauthorized\");\r\n      // }\r\n    }\r\n  }\r\n  next();\r\n};\r\n"],"file":"user-session.js"}