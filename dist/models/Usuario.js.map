{"version":3,"sources":["../../application/models/Usuario.js"],"names":["UsuarioSchema","Schema","name","String","email","type","required","index","unique","password","config","completeProfile","Boolean","accountType","ACCOUNT_TYPES","free","premium","top","topics","reference","Types","ObjectId","ref","data","Date","saved","UsuarioClass","length","AccountFree","AccountPremium","AccountTop","getAccount","canAdd","key","value","save","id","push","_reference","findIndex","splice","markModified","firstName","lastName","hashedPassword","bcrypt","hashSync","create","usuario","findOne","compareSync","toObject","loadClass","mongoose","model"],"mappings":"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","sourcesContent":["import bcrypt from \"bcryptjs\";\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\nimport { ACCOUNT_TYPES } from \"../business/account/types\";\r\nimport {\r\n  AccountFree,\r\n  AccountPremium,\r\n  AccountTop\r\n} from \"../business/account/validation\";\r\n\r\nconst UsuarioSchema = new Schema({\r\n  name: String,\r\n  email: { type: String, required: true, index: { unique: true } },\r\n  password: { type: String, required: true },\r\n  config: {},\r\n  completeProfile: Boolean,\r\n  accountType: {\r\n    type: String,\r\n    enum: [\r\n      ACCOUNT_TYPES.free.name,\r\n      ACCOUNT_TYPES.premium.name,\r\n      ACCOUNT_TYPES.top.name\r\n    ],\r\n    required: [true, \"Tipo de Conta é obrigatório\"]\r\n  },\r\n  topics: [\r\n    {\r\n      reference: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: \"Topicos\"\r\n      },\r\n      data: Date\r\n    }\r\n  ],\r\n  saved: [\r\n    {\r\n      reference: {\r\n        type: Schema.Types.ObjectId,\r\n        ref: \"Licitacao\"\r\n      },\r\n      data: Date\r\n    }\r\n  ]\r\n});\r\n\r\nclass UsuarioClass {\r\n  // `fullName` becomes a virtual\r\n  get fullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n\r\n  getCountTopics() {\r\n    return this.topics.length || 0;\r\n  }\r\n\r\n  getAccount() {\r\n    switch (this.accountType) {\r\n      case ACCOUNT_TYPES.free.name:\r\n        return new AccountFree(this);\r\n      case ACCOUNT_TYPES.premium.name:\r\n        return new AccountPremium(this);\r\n      case ACCOUNT_TYPES.top.name:\r\n        return new AccountTop(this);\r\n    }\r\n  }\r\n\r\n  canAddTopic() {\r\n    return this.getAccount().canAdd();\r\n  }\r\n\r\n  setConfig(key, value) {\r\n    this.config[key] = value;\r\n\r\n    return this.save();\r\n  }\r\n\r\n  getConfig(key) {\r\n    return this.config[key] || null;\r\n  }\r\n\r\n  async addFavorite(id) {\r\n    this.saved.push({\r\n      reference: id,\r\n      data: new Date()\r\n    });\r\n    await this.save();\r\n    return this.saved;\r\n  }\r\n\r\n  async removeFavorite(_reference) {\r\n    let index = this.saved.findIndex(({ reference }) => {\r\n      return reference == _reference;\r\n    });\r\n\r\n    if (index > -1) {\r\n      this.saved.splice(index, 1);\r\n      this.markModified(\"saved\");\r\n    }\r\n    await this.save();\r\n    return this.saved;\r\n  }\r\n\r\n  static async createNewUser({ password, ...data }) {\r\n    const hashedPassword = bcrypt.hashSync(password, 8);\r\n    const usuario = await this.create({\r\n      ...data,\r\n      password: hashedPassword,\r\n      accountType: ACCOUNT_TYPES.free.name\r\n    });\r\n    return usuario;\r\n  }\r\n\r\n  static async findUserWithRolesAuthenticate(email, password) {\r\n    const usuario = await this.findOne({\r\n      email\r\n    });\r\n\r\n    if (!usuario) {\r\n      throw \"Usuario não encontrado\";\r\n    }\r\n\r\n    if (!!usuario && bcrypt.compareSync(password, usuario.password)) {\r\n      return usuario.toObject();\r\n    } else {\r\n      throw \"E-mail ou senha estão incorretos\";\r\n    }\r\n  }\r\n}\r\n\r\nUsuarioSchema.loadClass(UsuarioClass);\r\nexport default mongoose.model(\"Usuario\", UsuarioSchema, \"usuarios\");\r\n"],"file":"Usuario.js"}